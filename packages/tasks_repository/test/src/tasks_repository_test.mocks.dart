// Mocks generated by Mockito 5.4.4 from annotations
// in tasks_repository/test/src/tasks_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:hive_flutter/hive_flutter.dart' as _i2;
import 'package:local_storage_service/src/local_storage_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHiveInterface_0 extends _i1.SmartFake implements _i2.HiveInterface {
  _FakeHiveInterface_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i4.LocalStorageService {
  MockLocalStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HiveInterface get hive => (super.noSuchMethod(
        Invocation.getter(#hive),
        returnValue: _FakeHiveInterface_0(
          this,
          Invocation.getter(#hive),
        ),
      ) as _i2.HiveInterface);

  @override
  set hive(_i2.HiveInterface? _hive) => super.noSuchMethod(
        Invocation.setter(
          #hive,
          _hive,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> setUpHive() => (super.noSuchMethod(
        Invocation.method(
          #setUpHive,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> delete({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#key: key},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i3.Either<void, T?> get<T>({
    required String? key,
    required T Function(Map<String, dynamic>)? fromJson,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #key: key,
            #fromJson: fromJson,
          },
        ),
        returnValue: _FakeEither_1<void, T?>(
          this,
          Invocation.method(
            #get,
            [],
            {
              #key: key,
              #fromJson: fromJson,
            },
          ),
        ),
      ) as _i3.Either<void, T?>);

  @override
  _i5.Future<_i3.Either<void, void>> save({
    required String? key,
    required Map<String, dynamic>? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<void, void>>.value(_FakeEither_1<void, void>(
          this,
          Invocation.method(
            #save,
            [],
            {
              #key: key,
              #value: value,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<void, void>>);
}
